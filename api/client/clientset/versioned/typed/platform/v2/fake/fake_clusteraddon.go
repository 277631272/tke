/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
	v2 "tkestack.io/tke/api/platform/v2"
)

// FakeClusterAddons implements ClusterAddonInterface
type FakeClusterAddons struct {
	Fake *FakePlatformV2
}

var clusteraddonsResource = schema.GroupVersionResource{Group: "platform.tkestack.io", Version: "v2", Resource: "clusteraddons"}

var clusteraddonsKind = schema.GroupVersionKind{Group: "platform.tkestack.io", Version: "v2", Kind: "ClusterAddon"}

// Get takes name of the clusterAddon, and returns the corresponding clusterAddon object, and an error if there is any.
func (c *FakeClusterAddons) Get(ctx context.Context, name string, options v1.GetOptions) (result *v2.ClusterAddon, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clusteraddonsResource, name), &v2.ClusterAddon{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2.ClusterAddon), err
}

// List takes label and field selectors, and returns the list of ClusterAddons that match those selectors.
func (c *FakeClusterAddons) List(ctx context.Context, opts v1.ListOptions) (result *v2.ClusterAddonList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clusteraddonsResource, clusteraddonsKind, opts), &v2.ClusterAddonList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v2.ClusterAddonList{ListMeta: obj.(*v2.ClusterAddonList).ListMeta}
	for _, item := range obj.(*v2.ClusterAddonList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}
